export class GameObject {
    constructor(scene: any, name: any, rectangle: any, options?: {});
    id: number;
    name: any;
    scene: any;
    rectangle: any;
    shape: any;
    velocity: Vector;
    acceleration: Vector;
    userControlledSpeed: number;
    currentAngle: number;
    rotation: number;
    friction: any;
    maxSpeed: number;
    ignoreCollisions: boolean;
    paused: boolean;
    deleted: boolean;
    shouldConstrainToCanvasBounds: boolean;
    fillColour: any;
    outlineColour: string;
    onPositionChange: () => void;
    onCollision: () => void;
    controlledByKeyPad: boolean;
    accelerateInDirectionOfTravelOnly: boolean;
    drawTrace: boolean;
    showHitBox: boolean;
    sprite: any;
    asset: any;
    currentCollisions: any[];
    keysDown: any[];
    sounds: any[];
    trace: any[];
    pause(): void;
    addSound(sound: any): GameObject;
    setShowHitBox(showHitBox: any): GameObject;
    setAsset(asset: any): GameObject;
    setScene(scene: any): GameObject;
    setAccelerateIndirectionOfTravelOnly(followVelocity: any): GameObject;
    setIgnoreCollisions(ignoreCollisions: any): GameObject;
    setMaxSpeed(maxSpeed: any): GameObject;
    setVelocity(velocity: any): GameObject;
    setAcceleration(acceleration: any): GameObject;
    setFriction(friction: any): GameObject;
    getFriction(): any;
    updateVelocity(velocity?: {
        x: any;
        y: any;
    }): void;
    remove(): void;
    setPosition(position: any): void;
    updatePositionBasedOnKeys(): void;
    getPosition(): {
        x: any;
        y: any;
    };
    constrainToCanvasBounds(): void;
    calculatePosition(): void;
    handleKeysDown(keysDown: any): void;
    handleKeyUp(keysDown: any, keyUp: any): void;
    handlePointerDown(position: any): void;
    handlePointerHover(): void;
    handlePointerHoverLeave(): void;
    handlePointerMovement(movement: any): void;
    handlePointerEnd(movement: any): void;
    stop(): void;
    findSound(name: any): any;
    playSound(name: any): void;
    stopSound(name?: any): void;
    drawHitBox(context: any): void;
    drawTraceLine(context: any): void;
    drawRotated(context: any): void;
    draw(context: any): void;
    hasNoVelocity(): boolean;
    getCollisionByType(collisionType: any): any;
    detectCollisions(object: any): void;
    collisionExists(collisionType: any): boolean;
    getCollisionsFriction(types?: any[]): number;
    handleRotationInCollision(collisionSide: any, friction: any): void;
    correctAccelerationAfterRotation(): void;
    handleCollisions(): void;
}
import { Vector } from "./vector";
//# sourceMappingURL=gameObject.d.ts.map